name: run Instrument Tests
run-name: ${{ github.actor }} is running Instrument Tests

on:
  workflow_dispatch:
    inputs:
      useUrlTestData:
        description: Enable download testdata from url
        type: boolean
        required: false
      instrument_options:
        description: Input subset of tests for testing
        required: false
env:
    PATH_TEST_SUITE: app/src/androidTest/assets/testRun.json

permissions:
  contents: read
  actions: read
  checks: write
  
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            version: 34
            arch: x86_64
            target: google_apis
            profile: Nexus 6
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{secrets.WDIO_ACCESS_TOKEN}}
          repository: ${{secrets.WDIO_REPOS}}
          ref: ${{ secrets.WDIO_BRANCH }}
          submodules: true
          
      - name: Download Test data from firebase
        if: "${{ inputs.useUrlTestData == true }}"
        run: |
          echo "${{ secrets.FIREBASE_SDK_KEY }}" > firebase/firebase-sdk-key.json
          cd firebase
          npm install
          node firebase.js
          cd ../

      - name: Load Google Services File
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $DATA | base64 --decode > app/google-services.json

      - name: Load Gradle Properties File
        env:
          DATA: ${{secrets.GRADLE_PROPERTIES}}
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "$DATA" | base64 --decode > ~/.gradle/gradle.properties

      - name: Set Up JDK Environment
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download schema from staging using task:downloadApolloSchema 
        run: ./gradlew Submodule:sdk:downloadApolloSchema --endpoint=${{secrets.WDIO_ENDPOINT}} --schema=${{secrets.WDIO_PATH_SCHEMA}}
        
      - name: Enable KVM for linux runners
        if: runner.os == 'Linux'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.version }}-${{ matrix.os }}-${{ matrix.target }}
          
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.version }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.arch }}
          avd-name: Nexus6_${{ matrix.version }}
          cores: 2
          sdcard-path-or-size: 1024M
          ram-size: 2048M
          heap-size: 512M
          emulator-boot-timeout: 12000
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: runner.os == 'Linux'
        with:
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true


      - name: Build App
        run: ./gradlew assembleStagingDebug
        
      - name: Build Test App
        run: ./gradlew assembleStagingDebugAndroidTest
          
      - name: Execute Staging Instrument on API ${{ matrix.version }}
        if: "${{ inputs.instrument_options == '' }}"
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.version }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.arch }}
          avd-name: Nexus6_${{ matrix.version }}
          cores: 2
          sdcard-path-or-size: 1024MB
          ram-size: 2048M
          heap-size: 512M
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb shell wm size
            adb shell wm density
            chmod +x ./scripts/run-testsuite.sh
            ./scripts/run-testsuite.sh --package=com.record360.app.test.tests --path="$PATH_TEST_SUITE"
            
      - name: Execute custom instrument test ${{ inputs.instrument_options }} on API ${{ matrix.version }}
        if: "${{ inputs.instrument_options != '' }}"
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.version }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.arch }}
          avd-name: Nexus6_${{ matrix.version }}
          cores: 2
          sdcard-path-or-size: 2000M
          ram-size: 2048M
          heap-size: 512M
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb shell wm size
            adb shell wm density
            chmod +x ./scripts/run-tests.sh
            ./scripts/run-tests.sh --instrument-options=${{ inputs.instrument_options }}
            
      - name: Upload reports on API ${{ matrix.version }}
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-suite-${{ matrix.version }}
          path: |
            app/build/outputs/*/connected/*
            app/build/reports/androidTests/connected/**
            
      - name: Generate reports on API ${{ matrix.version }}
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Report Testsuite on API ${{ matrix.version }}
          path: app/build/outputs/*/connected/**/flavors/**/*.xml
          reporter: java-junit
          fail-on-empty: 'false'
          fail-on-error: 'false'
