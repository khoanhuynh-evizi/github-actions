name: iOS UI Test
run-name: ${{ github.actor }} is XCUITests
on:
  workflow_dispatch:    
    inputs:
      runner_type:
        description: 'Select the type of runner'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - macos-latest
          - macos-13
      useUrlTestData:
        description: Enable download testdata from url
        type: boolean
        required: false
      list_tests:
        description: Input subset of tests for testing
        required: false
      ios-version:
        description: 'iOS Version (e.g., 17.5)'
        required: false
        default: '17.5'
        type: string
      simulator-name:
        description: 'Simulator Name'
        required: false
        default: 'iPhone 15'
        type: string
env:
    PATH_TEST_SUITE: record360UITests/Resources/testRun.json

permissions:
  contents: read
  actions: read
  checks: write
  
jobs:
  build:
    name: Test UI on Simulator
    runs-on: ${{ github.event.inputs.runner_type }}
    # needs: clean-up-mobile-data-ui-testing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{secrets.WDIO_ACCESS_TOKEN}}
          repository: ${{secrets.WDIO_IOS_REPOS}}
          ref: auto_latest # ${{ secrets.WDIO_IOS_BRANCH }}

      - name: Set up SSH Agent and Key
        uses: tanmancan/action-setup-ssh-agent-key@1.0.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
          ssh-public-key: ${{ secrets.PUBLIC_KEY_CHECKOUT }}

      - name: Download Test data from firebase
        if: "${{ inputs.useUrlTestData == true }}"
        run: |
          echo "${{ secrets.FIREBASE_SDK_KEY }}" > record360UITests/Firebase/firebase-sdk-key.json
          cd record360UITests/Firebase
          npm install
          node firebase.js
          cd ../../
          
      - name: Install CocoaPods dependencies
        run: |
          pod install --repo-update
          pod update Record360SDK
        shell: bash
        
      - name: Copy Configuration plist
        run: sh ci_scripts/ci_configuration.sh
        shell: bash

      - name: Install xcpretty from https://github.com/xcpretty
        run: |
          # Create temporary Gemfile just for xcpretty
          echo "source 'https://rubygems.org'" > Gemfile
          echo "gem 'xcpretty', git: 'https://github.com/xcpretty/xcpretty.git', branch: 'master'" >> Gemfile
          
          # Install using bundler
          bundle install
          
          # Verify version
          bundle exec xcpretty --version

      - name: Boot and launch simulator
        env:
          IOS_VERSION: ${{ inputs.ios-version || '17.5' }}
          SIMULATOR_NAME: ${{ inputs.simulator-name || 'iPhone 15' }}
        run: |
          DEVICE_TYPE=""
          case "${SIMULATOR_NAME}" in
            "iPhone 15")
              DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15"
              ;;
            "iPhone 16")
              DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16"
              ;;
            "iPhone 17")
              DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-17"
              ;;
          esac

          VERSION_TYPE = $(xcrun simctl list runtimes | grep -i "${IOS_VERSION}" | awk '{print $NF}')

          # Create and boot simulator with the specific iOS version
          DEVICE_ID=$(xcrun simctl create "${SIMULATOR_NAME}" "${DEVICE_TYPE}" "${VERSION_TYPE}")
          echo "Created simulator with ID: $DEVICE_ID"
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for simulator to be fully booted
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "Simulator booted successfully"
          
          # Configure status bar
          xcrun simctl status_bar "$DEVICE_ID" override --time "12:00" --dataNetwork wifi --wifiMode active --cellularMode active
          echo "Status bar configured"
          
          # Prepare simulator for notifications
          xcrun simctl spawn "$DEVICE_ID" defaults write com.apple.notificationcenterui.widget showInLockScreen -bool true
          xcrun simctl spawn "$DEVICE_ID" defaults write com.apple.SpringBoard FBSystemAlertsPolicyEnabled -bool NO
          
          # Restart SpringBoard to apply settings
          xcrun simctl spawn "$DEVICE_ID" launchctl stop com.apple.SpringBoard
          xcrun simctl spawn "$DEVICE_ID" launchctl start com.apple.SpringBoard
          sleep 15
          echo "SpringBoard restarted"
          
          # Store simulator ID in github env
          echo "SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: Execute Staging-UI
        if: "${{ inputs.list_tests == '' }}"
        run: |
          chmod +x ./ci_scripts/run-testsuite.sh
          ./ci_scripts/run-testsuite.sh --testBundle=record360UITests --path="$PATH_TEST_SUITE" --deviceId="${SIMULATOR_ID}"
        shell: bash

      - name: Execute custom test Staging-UI
        if: "${{ inputs.list_tests != '' }}"
        run: |
          chmod +x ./ci_scripts/run-tests.sh
          ./ci_scripts/run-tests.sh --testBundle=record360UITests --list-tests=${{ inputs.list_tests }} --deviceId="${SIMULATOR_ID}"
        shell: bash

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: UI Test Result
          path: TestResult.xcresult
          retention-days: 7
